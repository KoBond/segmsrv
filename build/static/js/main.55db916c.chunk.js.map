{"version":3,"sources":["components/Main/LogoView/img/logo.png","config/backendService.js","reducers/imageUploader.js","constants/imageSegmentation.js","reducers/imageSegmentations.js","constants/imageProcessing.js","reducers/imageProcessing.js","constants/imageLastSegmentation.js","reducers/imageLastSegmentations.js","reducers/index.js","constants/imageUploader.js","components/Main/MainView/FooterView.jsx","config/systemConfig.js","components/Main/LoadingView/LoadingView.js","components/Main/NavMenuLine/NavMenuLine.jsx","components/Main/NavMainMenuCollapsable/NavMainMenuCollapsable.jsx","components/Main/LogoView/LogoView.js","components/Main/MainView/MainViewStaticPages/MainViewHelpView.jsx","components/Main/MainView/MainViewIndexView.jsx","lib/utils.js","components/ImageProcessing/views/ImageUploaderPage.jsx","components/ImageProcessing/views/ImageSegmentationPage.jsx","components/ImageProcessing/views/ImagePreviewPage.jsx","components/ImageProcessing/views/ImageLastSegmentationPage.jsx","components/ImageProcessing/ImageProcessingNotFoundView.jsx","actions/imageUploader.js","actions/imageProcessing.js","containers/ImageProcessing/ConnectedImageUploading.js","containers/ImageProcessing/ConnectedImageSegmentation.js","actions/segmentationProcess.js","containers/ImageProcessing/ConnectedImagePreview.js","actions/lastSegmentationProcess.js","containers/ImageProcessing/ConnectedImageLastSegmentation.js","routes/ImageProcessing/ImageProcessingIndex.js","containers/RedirectTo.js","containers/ImageProcessing/index.js","components/ImageProcessing/ImageProcessingView.jsx","components/Main/MainView/MainView.jsx","components/Main/MainView/MainViewStaticPages/MainAboutView.jsx","components/Main/NavModuleMenu/NavModuleMenu.jsx","containers/App.js","routes/index.js","components/Main/NotFoundView/NotFoundView.jsx","containers/Root.js","extensions/serviceWorker/serviceWorker.js","index.js","config/configureStore.js"],"names":["module","exports","backendServiceURL","initialState","uploadSourceFileRequestInProcess","uploadSourceFileRequestError","uploadSourceFileRequestSuccess","uploadSourceFileRequestStatus","uploadSourceFileName","serverSourceFileNameURL","makeSegmentationRequestInProcess","makeSegmentationRequestError","makeSegmentationRequestSuccess","makeSegmentationRequestStatus","sourceFileName","resultSegmentationFileUrl","resultSegmentationFileName","imageProcessingStep","imageProcessingStepHint","getLastSegmentationRequestInProcess","getLastSegmentationRequestError","getLastSegmentationRequestSuccess","getLastSegmentationRequestStatus","combineReducers","imageUploader","state","action","type","filename","fileURL","error","errorCode","errorMessage","childUserId","imageSegmentations","imageProcessing","processingStep","imageLastSegmentations","FooterView","className","to","LoadingView","text","role","style","width","NavMenuLine","props","context","focused","self","this","items","map","m","index","link","attention","key","replace","caption","badgeVal","title","picture","Array","isArray","length","currentPath","location","pathname","activeItemIndex","i","currentLink","indexOf","nextProps","prevState","newFocusedItem","getCurrentActiveItem","Component","withRouter","NavMainMenuCollapsable","LogoView","leftItems","rightItems","collapsed","onToggleCollapse","collapsedMenuClass","onClick","src","logo","alt","MainViewHelpView","href","MainViewIndexView","validationJSON","response","json","ImageUploaderPage","file","fsFileName","camError","goToPreview","handleFileChange","bind","sendFile","handleTakePhoto","handleCameraError","event","setState","target","files","name","setImageProcessingStep","doUploadImage","dataUri","fileName","_p8","s","p","Math","random","toString","substr","createGuid","onChange","onTakePhoto","onCameraError","isMaxResolution","idealResolution","height","imageType","IMAGE_TYPES","JPG","isSilentMode","ImageSegmentationPage","segmentationDone","runSegmentation","doSegmentatonImage","sourceFileUrl","ImagePreviewPage","sourceFileURL","goToSegmentation","segmentatonReset","ImageLastSegmentationPage","ProcessedImages","images","JSON","parse","window","localStorage","getItem","src_file_url","slice","res_file_url","doGetLastSegmentatonImage","ImageProcessing","data","FormData","append","dataURI","byteString","atob","split","ab","ArrayBuffer","ia","Uint8Array","charCodeAt","File","dataURItoFile","dispatch","requestUploadImage","httpStatusCode","apiErrorCode","apiErrorMessage","fetch","mode","method","headers","body","then","status","code","message","Error","uploadImageRequestSuccess","file_name","catch","connect","dispath","requestSegmentaton","apiCommandGETMakeSegmentation","resFilename","resFileURL","res_file_name","resFilesUrls","segmented_files","setItem","stringify","resultLastSegmentationFilesURLs","ImageProcessingModules","exact","ModuleRootPath","path","component","ConnectedImageUploading","filter–°omponent","ConnectedImagePreview","ConnectedImageSegmentation","ConnectedImageLastSegmentation","newPath","ImageProcessingNotFoundView","ImageProcessingMenu","ImageProcessingRoutes","ImageProcessingFilter","ImageProcessingView","DesktopMainView","collapsedMainMenu","previousLocation","menuItems","authMenuItems","authorized","systemVersion","NavModuleMenu","RightSide","systemName","MainView","App","Root","store","routes","Boolean","hostname","match","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.55db916c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.e1cd47af.png\";","export const backendServiceURL = 'https://127.0.0.1:443/'\r\n/*  process.env.NODE_ENV === 'development'\r\n    ? 'https://localhost:3303/'\r\n    : 'https://easy-demo-segmentator.ru:443/';\r\n*/","import\t{\r\n  UPLOAD_SOURCE_IMAGE_REQUEST,\r\n  UPLOAD_SOURCE_IMAGE_SUCCESS,\r\n  UPLOAD_SOURCE_IMAGE_ERROR,\r\n}\tfrom\t'../constants/imageUploader';\r\n\r\nconst initialState = {\r\n  uploadSourceFileRequestInProcess: false,\r\n  uploadSourceFileRequestError : false,\r\n  uploadSourceFileRequestSuccess: false,\r\n  uploadSourceFileRequestStatus: null, \r\n  uploadSourceFileName: null,\r\n  serverSourceFileNameURL: null,\r\n};\r\n\r\nexport default function imageUploader(state = initialState, action) {\r\n  switch (action.type) {\r\n\r\n      case UPLOAD_SOURCE_IMAGE_REQUEST:\r\n        if (process.env.NODE_ENV === 'development') console.log('raise action - UPLOAD_SOURCE_IMAGE_REQUEST', action);\r\n        return { ...state, \r\n          uploadSourceFileRequestInProcess: true,\r\n          uploadSourceFileRequestError : false,\r\n          uploadSourceFileRequestSuccess: false,\r\n          uploadSourceFileRequestStatus: 'The source image is being uploaded to the server',\r\n          uploadSourceFileName: action.filename,\r\n        }\r\n\r\n      case UPLOAD_SOURCE_IMAGE_SUCCESS:\r\n          if (process.env.NODE_ENV === 'development') console.log('raise action - UPLOAD_SOURCE_IMAGE_SUCCESS', action);\r\n          return { ...state, \r\n            uploadSourceFileRequestInProcess: false,\r\n            uploadSourceFileRequestError: false,\r\n            uploadSourceFileRequestSuccess: true,\r\n            uploadSourceFileRequestStatus: 'The source image has been uploaded to the server',\r\n            serverSourceFileNameURL: action.fileURL,\r\n          }\r\n\r\n      case UPLOAD_SOURCE_IMAGE_ERROR:\r\n          if (process.env.NODE_ENV === 'development') console.log('raise action - UPLOAD_SOURCE_IMAGE_ERROR', action);\r\n          return { ...state,\r\n            uploadSourceFileRequestInProcess: false,\r\n            uploadSourceFileRequestError: true,\r\n            uploadSourceFileRequestSuccess: false,\r\n            uploadSourceFileRequestStatus: `Error loading the source image to the server: \r\n              ${action.error.errorCode}\r\n              ${action.error.errorMessage}`,\r\n            childUserId: null,\r\n          }\r\n  \r\n    default:\r\n      return state;\r\n  }\r\n}","import {backendServiceURL} from '../config/backendService'\r\n\r\nexport const MAKE_SEGMENTAQTION_REQUEST = 'MAKE_SEGMENTAQTION_REQUEST'\r\nexport const MAKE_SEGMENTAQTION_SUCCESS = 'MAKE_SEGMENTAQTION_SUCCESS'\r\nexport const MAKE_SEGMENTAQTION_ERROR = 'MAKE_SEGMENTAQTION_ERROR'\r\nexport const MAKE_SEGMENTAQTION_RESET = 'MAKE_SEGMENTAQTION_RESET'\r\n\r\n// Backend API\r\n//dl_api/1.0/segmentation/<filename> - start segmentation process\r\n\r\nexport const apiCommandGETMakeSegmentation = backendServiceURL + 'dl_api/1.0/segmentation'","import\t{\r\n  MAKE_SEGMENTAQTION_REQUEST,\r\n  MAKE_SEGMENTAQTION_SUCCESS,\r\n  MAKE_SEGMENTAQTION_ERROR,\r\n  MAKE_SEGMENTAQTION_RESET,\r\n}\tfrom\t'../constants/imageSegmentation';\r\n\r\nconst initialState = {\r\n  makeSegmentationRequestInProcess: false,\r\n  makeSegmentationRequestError : false,\r\n  makeSegmentationRequestSuccess: false,\r\n  makeSegmentationRequestStatus: null,\r\n  \r\n  sourceFileName: null,\r\n  resultSegmentationFileUrl:null,\r\n  resultSegmentationFileName:null,\r\n};\r\n\r\nexport default function imageSegmentations(state = initialState, action) {\r\n  switch (action.type) {\r\n\r\n      case MAKE_SEGMENTAQTION_REQUEST:\r\n          if (process.env.NODE_ENV === 'development') console.log('raise action - MAKE_SEGMENTAQTION_REQUEST', action);\r\n          return { ...state, \r\n            makeSegmentationRequestInProcess: true,\r\n            makeSegmentationRequestError : false,\r\n            makeSegmentationRequestSuccess: false,\r\n            makeSegmentationRequestStatus: 'Segmentation processing',\r\n            sourceFileName: action.sourceFileName,\r\n          }\r\n    \r\n      case MAKE_SEGMENTAQTION_SUCCESS:\r\n          if (process.env.NODE_ENV === 'development') console.log('raise action - MAKE_SEGMENTAQTION_SUCCESS', action);\r\n          return { ...state, \r\n            makeSegmentationRequestInProcess: false,\r\n            makeSegmentationRequestError: false,\r\n            makeSegmentationRequestSuccess: true,\r\n            makeSegmentationRequestStatus: 'Segmentation done',\r\n            resultSegmentationFileUrl:action.resultSegmentationFileUrl,\r\n            resultSegmentationFileName:action.resultSegmentationFileName,\r\n          }\r\n    \r\n      case MAKE_SEGMENTAQTION_ERROR:\r\n          if (process.env.NODE_ENV === 'development') console.log('raise action - MAKE_SEGMENTAQTION_ERROR', action);\r\n          return { ...state,\r\n            makeSegmentationRequestInProcess: false,\r\n            makeSegmentationRequestError: true,\r\n            makeSegmentationRequestSuccess: false,\r\n            makeSegmentationRequestStatus: `Segmentation error: \r\n              ${action.error.errorCode}\r\n              ${action.error.errorMessage}`,\r\n          }\r\n      case MAKE_SEGMENTAQTION_RESET:\r\n        if (process.env.NODE_ENV === 'development') console.log('raise action - MAKE_SEGMENTAQTION_RESET', action);\r\n        return { ...state,\r\n          makeSegmentationRequestInProcess: false,\r\n          makeSegmentationRequestError : false,\r\n          makeSegmentationRequestSuccess: false,\r\n          makeSegmentationRequestStatus: null,\r\n\r\n          resultSegmentationFileUrl:null,\r\n          resultSegmentationFileName:null,\r\n        }\r\n        \r\n    default:\r\n      return state;\r\n  }\r\n}","export const SET_PROCESSING_STEP = 'PROCESSING_STEP' ","import\t{\r\n  SET_PROCESSING_STEP,\r\n}\tfrom\t'../constants/imageProcessing';\r\n\r\nconst initialState = {\r\n  imageProcessingStep: null,\r\n  imageProcessingStepHint: 'Please get image first',\r\n};\r\n\r\nexport default function imageUploader(state = initialState, action) {\r\n  switch (action.type) {\r\n      case SET_PROCESSING_STEP:\r\n        if (process.env.NODE_ENV === 'development') console.log('raise action - SET_PROCESSING_STEP', action);\r\n        return { ...state, \r\n          imageProcessingStep: action.processingStep,\r\n        }\r\n    default:\r\n      return state;\r\n  }\r\n}","import {backendServiceURL} from '../config/backendService'\r\n\r\nexport const GET_LAST_SEGMENTAQTION_REQUEST = 'GET_LAST_SEGMENTAQTION_REQUEST'\r\nexport const GET_LAST_SEGMENTAQTION_SUCCESS = 'GET_LAST_SEGMENTAQTION_SUCCESS'\r\nexport const GET_LAST_SEGMENTAQTION_ERROR = 'GET_LAST_SEGMENTAQTION_ERROR'\r\n\r\n// Backend API\r\n//dl_api/1.0/last_segmentations - last segmentation results\r\n\r\nexport const apiCommandGETLastSegmentation = backendServiceURL + 'dl_api/1.0/last_segmentations'","import\t{\r\n  GET_LAST_SEGMENTAQTION_REQUEST,\r\n  GET_LAST_SEGMENTAQTION_SUCCESS,\r\n  GET_LAST_SEGMENTAQTION_ERROR,\r\n}\tfrom\t'../constants/imageLastSegmentation';\r\n\r\nconst initialState = {\r\n  getLastSegmentationRequestInProcess: false,\r\n  getLastSegmentationRequestError : false,\r\n  getLastSegmentationRequestSuccess: false,\r\n  getLastSegmentationRequestStatus: null,\r\n};\r\n\r\nexport default function imageLastSegmentations(state = initialState, action) {\r\n  switch (action.type) {\r\n\r\n      case GET_LAST_SEGMENTAQTION_REQUEST:\r\n          if (process.env.NODE_ENV === 'development') console.log('raise action - GET_LAST_SEGMENTAQTION_REQUEST', action);\r\n          return { ...state, \r\n            getLastSegmentationRequestInProcess: true,\r\n            getLastSegmentationRequestError : false,\r\n            getLastSegmentationRequestSuccess: false,\r\n            getLastSegmentationRequestStatus: 'Get last segmentation processing',\r\n          }\r\n    \r\n      case GET_LAST_SEGMENTAQTION_SUCCESS:\r\n          if (process.env.NODE_ENV === 'development') console.log('raise action - GET_LAST_SEGMENTAQTION_SUCCESS', action);\r\n          return { ...state, \r\n            getLastSegmentationRequestInProcess: false,\r\n            getLastSegmentationRequestError: false,\r\n            getLastSegmentationRequestSuccess: true,\r\n            getLastSegmentationRequestStatus: 'Last segmentation was received',\r\n          }\r\n    \r\n      case GET_LAST_SEGMENTAQTION_ERROR:\r\n          if (process.env.NODE_ENV === 'development') console.log('raise action - GET_LAST_SEGMENTAQTION_ERROR', action);\r\n          return { ...state,\r\n            getLastSegmentationRequestInProcess: false,\r\n            getLastSegmentationRequestError: true,\r\n            getLastSegmentationRequestSuccess: false,\r\n            getLastSegmentationRequestStatus: `Last segmentation receiving error: \r\n              ${action.error.errorCode}\r\n              ${action.error.errorMessage}`,\r\n          }\r\n        \r\n    default:\r\n      return state;\r\n  }\r\n}","import { combineReducers } from 'redux';\r\nimport imageUploader from './imageUploader';\r\nimport imageSegmentations from './imageSegmentations';\r\nimport imageProcessing from './imageProcessing';\r\nimport imageLastSegmentations from './imageLastSegmentations';\r\n\r\nexport default combineReducers({\r\n  imageUploader,\r\n  imageSegmentations,\r\n  imageProcessing,\r\n  imageLastSegmentations,\r\n})","import {backendServiceURL} from '../config/backendService'\r\n\r\nexport const UPLOAD_SOURCE_IMAGE_REQUEST = 'UPLOAD_SOURCE_IMAGE_REQUEST'\r\nexport const UPLOAD_SOURCE_IMAGE_SUCCESS = 'UPLOAD_SOURCE_IMAGE_SUCCESS'\r\nexport const UPLOAD_SOURCE_IMAGE_ERROR = 'UPLOAD_SOURCE_IMAGE_ERROR'\r\n\r\n// Backend API\r\n//dl_api/1.0/upload_src_img - upload source image file\r\n\r\nexport const apiCommandPOSTUploadSrcImg = backendServiceURL + 'dl_api/1.0/upload_src_img'","import React from 'react';\r\nimport { systemVersion, systemName } from '../../../config/systemConfig';\r\nimport { Link } from 'react-router-dom';\r\nexport const FooterView = () => (\r\n  <footer className=\"fixed-bottom\">\r\n    <div className=\"container-fluid\">\r\n      <div className=\"row pt-1 mt-1\">\r\n        <div className=\"col-3 mr-auto\">\r\n          <Link to=\"/\" className=\"internal-page-link-calm-nu\" >\r\n            <p className=\"text-nowrap\">\r\n              Neural Image Segmentation Demo\r\n            </p>\r\n          </Link>\r\n        </div>\r\n        <div className=\"col ml-auto\">\r\n          <p className=\"text-right\">\r\n            <Link to=\"/About\" className=\"internal-page-link-calm-nu\" >\r\n              {systemName} {systemVersion}\r\n            </Link>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </footer>\r\n)","export const systemVersion = 'v0.0.1'\r\nexport const systemName = 'Segme\\'Nt'","import React from 'react';\r\nimport './styles';\r\nimport PropTypes from 'prop-types';\r\nexport const LoadingView = ( { text } ) => (\r\n  <div className=\"progress progress-processing\">\r\n    <div className=\"progress-bar progress-bar-striped progress-bar-animated\" role=\"progressbar\" style= { { width: '100%' } }>\r\n      { text }\r\n    </div>\r\n  </div>\r\n)\r\n\r\nLoadingView.propTypes = {\r\n  text: PropTypes.string,\r\n}","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './styles/NavMenuLine.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { withRouter } from 'react-router'\r\n\r\nclass NavMenuLine extends Component {\r\n  static propTypes = {\r\n    items: PropTypes.array.isRequired\r\n  }\r\n\r\n  constructor(props, context) {\r\n    super(props, context);\r\n    this.state = {\r\n      focused: 0,\r\n    }\r\n    \r\n  }\r\n  \r\n  static getCurrentActiveItem(props){\r\n    const { items } = props;\r\n    if ( Array.isArray(items) && items.length > 0 ){\r\n      let currentPath = props.location.pathname;\r\n      let activeItemIndex = -1;\r\n      for(let i=0; i<props.items.length; i++){\r\n        let currentLink = props.items[i].link;\r\n        if (currentPath.indexOf(currentLink) !== -1) {\r\n          activeItemIndex = i;\r\n          break;\r\n        }\r\n      }\r\n      return activeItemIndex;\r\n    }\r\n  }\r\n\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    const newFocusedItem = NavMenuLine.getCurrentActiveItem(nextProps)\r\n    if (newFocusedItem !== prevState.focused) {\r\n      return {\r\n        focused: newFocusedItem\r\n      };\r\n    }\r\n    // If there are no changes\r\n    return null;\r\n  }\r\n\r\n  render() {\r\n    // Saving a link to this in the map closure\r\n    const self = this;\r\n    const { items } = this.props;\r\n    return (\r\n      <div className=\"nav-menu-line\">\r\n        { items &&\r\n          <ul className=\"nav navbar-nav d-flex\">{ items.map(function(m, index) {\r\n            if (!m.link) return null; // If the link attribute is not specified the element is not output\r\n            let style = \"\";\r\n            if (self.state.focused === index) {\r\n              style += ' focused ';\r\n            }\r\n            if (m.attention === true) {\r\n              style += ' attention ';\r\n            }\r\n            return (\r\n            <li className={ 'flex-sm-fill nav-item ' + style } key={ index } >\r\n                <Link className=\"nav-link\" replace ={ m.replace } to={ m.link }>\r\n                  <span className=\"text-nowrap\">&nbsp; { m.caption } &nbsp;</span>\r\n                  { typeof(m.badgeVal ) === 'function' ? \r\n                  <div className=\"badge badge-light\" title=\"New messages!\">\r\n                    { m.badgeVal() }\r\n                  </div>:null }\r\n                  { typeof(m.picture ) === 'function' ?  m.picture() :null }\r\n                </Link>\r\n            </li>);\r\n          }) }\r\n          </ul>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(NavMenuLine)","import React from 'react';\r\nimport NavMenuLine from '../NavMenuLine/NavMenuLine';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const NavMainMenuCollapsable = ({LogoView, leftItems, rightItems, collapsed, onToggleCollapse}) =>{\r\n  const collapsedMenuClass = collapsed ? 'collapse' : 'expand';\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <div className=\"row no-gutters\">\r\n        <div className=\"col-xl-1 col-lg-0\"></div>\r\n\r\n        <nav className=\"col navbar navbar-expand-md navbar-light\" role=\"navigation\">\r\n          { LogoView &&\r\n            <div className=\"navbar-brand\">\r\n              <LogoView/>\r\n            </div>\r\n          }\r\n\r\n          <button className=\"navbar-toggler\" type=\"button\" onClick={ onToggleCollapse }>\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n\r\n          <div className= { collapsedMenuClass + ' navbar-collapse' }>\r\n            { leftItems &&\r\n              <div className=\"navbar-nav mr-auto\">\r\n                <NavMenuLine items={ leftItems }/>\r\n              </div>\r\n            }\r\n            <div></div>\r\n            { rightItems &&\r\n              <div className=\"navbar-nav ml-auto\">\r\n                <NavMenuLine items={ rightItems }/>\r\n              </div>\r\n            }\r\n          </div>\r\n        </nav>\r\n        <div className=\"col-0 col-xl-1\"></div>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nNavMainMenuCollapsable.propTypes = {\r\n  LogoView: PropTypes.func,\r\n  leftItems: PropTypes.array,\r\n  rightItems: PropTypes.array,\r\n  collapsed: PropTypes.bool,\r\n  onToggleCollapse: PropTypes.func,\r\n};","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './styles';\r\nimport logo from './img/logo.png';\r\n\r\nexport const LogoView = () => (\r\n  <Link to=\"/\">\r\n      <img src={ logo } className=\"pull-left z-app-logo\" alt=\"dlDemo\"/>\r\n  </Link>\r\n)","import React from 'react';\r\n \r\nexport const MainViewHelpView = ()=> (\r\n  <div className=\"container-fluid\">\r\n    <br/>\r\n    <div className=\"row\">\r\n      <div className=\"col-xl-3 col-lg-0\">\r\n        {/* Additional main page window */}\r\n      </div>\r\n      <div className=\"col-xl-7 col-md\">\r\n        {/* Main window of the main page */}\r\n        <div className=\"row\">\r\n\r\n\r\n\r\n          <div className=\"col-xl-10 col-md\">\r\n            <h5>Segmentation model description</h5>\r\n            <div className=\"alert alert-info zalert-info-card\" role=\"alert\">\r\n              <h4>Deeplabv3-ResNet101</h4>\r\n              <hr/>\r\n              <p>Deeplabv3-ResNet101 is contructed by a Deeplabv3 model with a ResNet-101 backbone.</p>\r\n              <p>The pre-trained model has been trained on a subset of COCO train2017, on the 20 categories that are present in the Pascal VOC dataset.</p>\r\n\r\n              <h5>Resources</h5>\r\n              <hr/>\r\n              <a title=\"Deeplabv3-ResNet101 | PyTorch\" \r\n                 href=\"https://pytorch.org/hub/pytorch_vision_deeplabv3_resnet101/\"\r\n                 className=\"internal-page-link-calm\">\r\n                Deeplabv3-ResNet101 | PyTorch\r\n              </a>\r\n              <br/>\r\n              <a title=\"Rethinking Atrous Convolution for Semantic Image Segmentation\" \r\n                 href=\"https://arxiv.org/abs/1706.05587\"\r\n                 className=\"internal-page-link-calm\">\r\n                Rethinking Atrous Convolution for Semantic Image Segmentation\r\n              </a>\r\n              \r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n)","import React from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nexport const MainViewIndexView = ()=> (\r\n  <div className=\"container-fluid\">\r\n    <br/>\r\n    <div className=\"row\">\r\n      <div className=\"col align-items-center\">\r\n        {/* Additional menu of the main page */}\r\n      </div>\r\n    </div>\r\n    <div className=\"row mb-5\">\r\n      <div className=\"col-xl-3 col-lg-0\">\r\n        {/* Additional main page window */}\r\n      </div>\r\n      <div className=\"col-xl-7 col-md\">\r\n        {/* Main window of the main page */}\r\n        <div className=\"row\">\r\n          <div className=\"col-xl-10 col-md\">\r\n           <Redirect to='/About'/>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n)","\r\nexport function checkHttpStatus(response) {\r\n  if (response.status >= 200 && response.status < 300) {\r\n    return response\r\n  } else {\r\n    const error = new Error(response.statusText)\r\n    error.response = response\r\n    throw error\r\n  }\r\n}\r\n\r\nexport function checkAPIStatus(response) {\r\n  if (response.status >= 200 && response.status < 300) {\r\n    return response\r\n  } else {\r\n    const error = new Error(response.statusText)\r\n    error.response = response\r\n    throw error\r\n  }\r\n}\r\n\r\nexport function validationJSON(response) {\r\n  return response.json()\r\n}\r\n\r\nexport function makeJSON(data) {\r\n  return JSON.stringify(data)\r\n}\r\n\r\nexport function createGuid() {  \r\n  function _p8(s) {  \r\n     var p = (Math.random().toString(16)+\"000000000\").substr(2,8);  \r\n     return s ? \"-\" + p.substr(0,4) + \"-\" + p.substr(4,4) : p ;  \r\n  }  \r\n  return _p8() + _p8(true) + _p8(true) + _p8();  \r\n} \r\n\r\nexport function dataURItoFile (dataURI, filename) {\r\n  let byteString = atob(dataURI.split(',')[1]);\r\n\r\n  let ab = new ArrayBuffer(byteString.length);\r\n  let ia = new Uint8Array(ab);\r\n  for (let i = 0; i < byteString.length; i++) {\r\n    ia[i] = byteString.charCodeAt(i);\r\n  }\r\n  let blob = new File([ab], filename, { type: \"image/jpeg\"});\r\n  return blob;\r\n}","import React, { Component } from 'react';\r\nimport Camera, { IMAGE_TYPES } from 'react-html5-camera-photo';\r\nimport 'react-html5-camera-photo/build/css/index.css';\r\nimport { createGuid } from '../../../lib/utils';\r\nimport {Redirect} from 'react-router-dom';\r\nimport { LoadingView } from '../../Main';\r\n\r\nexport default class ImageUploaderPage extends Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n    this.state = {\r\n      file: null,\r\n      fsFileName: null,\r\n      camError: false,\r\n      uploadSourceFileRequestSuccess: false,\r\n      uploadSourceFileRequestError: false,\r\n      uploadSourceFileRequestStatus: null,\r\n      uploadSourceFileRequestInProcess: false,\r\n      goToPreview: false,\r\n    };\r\n\r\n    this.handleFileChange = this.handleFileChange.bind(this);\r\n    this.sendFile = this.sendFile.bind(this);\r\n    this.handleTakePhoto = this.handleTakePhoto.bind(this);\r\n    this.handleCameraError = this.handleCameraError.bind(this);\r\n  }\r\n\r\n  handleFileChange(event) {\r\n    this.setState({\r\n      file:event.target.files[0],\r\n      fsFileName: event.target.files[0].name\r\n    })\r\n  }\r\n\r\n  sendFile() {\r\n    this.props.setImageProcessingStep(0);\r\n    this.props.doUploadImage( null, this.state.file, 'file' )\r\n  }\r\n \r\n  handleTakePhoto (dataUri) {\r\n    const fileName = createGuid()+'.jpg'\r\n    this.props.setImageProcessingStep(0);\r\n    this.props.doUploadImage( fileName, dataUri, 'camera' )\r\n  }\r\n\r\n  handleCameraError (error) {\r\n    this.setState({\r\n      camError: true\r\n    })\r\n  }\r\n  \r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    if (!nextProps.imageProcessingStep)\r\n    if (nextProps.uploadSourceFileRequestSuccess && (!prevState.uploadSourceFileRequestSuccess)) {\r\n      nextProps.setImageProcessingStep(1);\r\n      return {\r\n        uploadSourceFileRequestSuccess: true,\r\n        goToPreview: true,\r\n      };\r\n    }\r\n    if (nextProps.uploadSourceFileRequestError && (!prevState.uploadSourceFileRequestError)) {\r\n      return {\r\n        uploadSourceFileRequestError: nextProps.uploadSourceFileRequestError,\r\n        uploadSourceFileRequestStatus: nextProps.uploadSourceFileRequestStatus,\r\n        uploadSourceFileRequestInProcess: nextProps.uploadSourceFileRequestInProcess,\r\n      };\r\n    }\r\n    if (nextProps.uploadSourceFileRequestInProcess && (!prevState.uploadSourceFileRequestInProcess)) {\r\n      return {\r\n        uploadSourceFileRequestError: nextProps.uploadSourceFileRequestError,\r\n        uploadSourceFileRequestInProcess: nextProps.uploadSourceFileRequestInProcess,\r\n      };\r\n    }    \r\n    return null;\r\n  }\r\n\r\n  render() {\r\n    const { goToPreview, camError, uploadSourceFileRequestError, \r\n      uploadSourceFileRequestStatus, uploadSourceFileRequestInProcess }= this.state;\r\n   \r\n    if ( goToPreview )\r\n      return (<Redirect to='/ImgProcessing/Preview'/>)\r\n    else\r\n    return (\r\n      <div>\r\n          {(uploadSourceFileRequestInProcess)&&\r\n          <div className=\"row mb-2\">\r\n            <div className=\"col\">\r\n                <LoadingView text='Uploading image'/>\r\n            </div>\r\n          </div>\r\n          }\r\n\r\n          {(uploadSourceFileRequestError)&&\r\n          <div className=\"row mb-2\">\r\n            <div className=\"col\">\r\n              <div className=\"alert alert-info zalert-info-card\" role=\"alert\">\r\n                <p>File uploading error</p>\r\n                <hr/>\r\n                <p>{ uploadSourceFileRequestStatus }</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          }\r\n          {(camError)&&\r\n          <div className=\"row mb-2\">\r\n            <div className=\"col\">\r\n              <div className=\"alert alert-info zalert-info-card\" role=\"alert\">\r\n                <p>Camera error</p>\r\n                <hr/>\r\n                <p>Camera is not available, please use file upload form</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          }\r\n\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            <div className=\"file-uploader\">\r\n              <div className=\"input-group\">\r\n                <div className=\"custom-file\">\r\n                  <input type=\"file\"\r\n                    className=\"custom-file-input\"\r\n                    onChange={this.handleFileChange}\r\n                  />\r\n                  <label className=\"custom-file-label\">{this.state.fsFileName}</label>\r\n                </div>\r\n                {(this.state.fsFileName) &&\r\n                <div className=\"input-group-append\">\r\n                  <button className=\"btn btn-outline-success\" type=\"button\" onClick={this.sendFile}>Upload</button>\r\n                </div>\r\n                }\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        { (!camError)&&\r\n        <div className=\"row\">\r\n          <div className=\"col\">\r\n            <Camera\r\n              onTakePhoto = { goToPreview || this.handleTakePhoto }\r\n              onCameraError = { goToPreview || this.handleCameraError }\r\n              isMaxResolution = {true}\r\n              idealResolution = {{width: 800, height: 600}}\r\n              imageType = {IMAGE_TYPES.JPG}\r\n              isSilentMode = {true}\r\n            />\r\n          </div>\r\n        </div>\r\n        }        \r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { LoadingView } from '../../Main';\r\nimport { Redirect } from 'react-router';\r\n\r\nexport default class ImageSegmentationPage extends Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n    this.state = {\r\n      segmentationDone: false\r\n    };\r\n    this.runSegmentation = this.runSegmentation.bind(this);\r\n  }\r\n\r\n  runSegmentation() {\r\n    this.props.doSegmentatonImage( this.props.sourceFileName )\r\n  }\r\n\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    if (nextProps.makeSegmentationRequestSuccess && (!prevState.segmentationDone)) {\r\n      return {\r\n        segmentationDone: true,\r\n      };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  componentDidMount(){\r\n    if (!this.props.makeSegmentationRequestSuccess&&!this.props.makeSegmentationRequestInProcess) \r\n      this.props.doSegmentatonImage( this.props.sourceFileName )\r\n  }\r\n\r\n  render() {\r\n    const { makeSegmentationRequestInProcess, resultSegmentationFileUrl, \r\n      makeSegmentationRequestStatus, makeSegmentationRequestError, sourceFileUrl, makeSegmentationRequestSuccess}= this.props;\r\n    const { segmentationDone }= this.state;\r\n\r\n    if (!this.props.sourceFileUrl) \r\n      return (<Redirect to='/ImgProcessing'/>)\r\n    else\r\n    return (\r\n      <div>\r\n        {(makeSegmentationRequestInProcess)&&\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n              <LoadingView text='Segmentation in process...'/>\r\n          </div>\r\n        </div>\r\n        }\r\n\r\n        {(!segmentationDone)&&(!makeSegmentationRequestInProcess)&&(!makeSegmentationRequestError)&&\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            <button onClick = { this.runSegmentation } className=\"btn btn-outline-info btn-sm btn-block\">\r\n                Segmentation &nbsp;\r\n              <i className=\"fa  fa-flask\"/>\r\n            </button>\r\n          </div>\r\n        </div>\r\n        }\r\n\r\n        {(makeSegmentationRequestError)&&\r\n          <div className=\"row mb-2\">\r\n            <div className=\"col\">\r\n              <div className=\"alert alert-info zalert-info-card\" role=\"alert\">\r\n                <p>File uploading error</p>\r\n                <hr/>\r\n                <p>{ makeSegmentationRequestStatus }</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        }\r\n\r\n        <div className=\"row mt-2\">\r\n          <div className=\"col\">\r\n            { makeSegmentationRequestSuccess &&\r\n              <img src={ sourceFileUrl } width=\"300\" alt=\"\" className=\"img-fluid rounded\"/>\r\n            }\r\n          </div>\r\n          <div className=\"col\">\r\n            <img src={ resultSegmentationFileUrl } width=\"300\" alt=\"\" className=\"img-fluid rounded\"/>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\nexport default class ImagePreviewPage extends Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n    this.state = {\r\n      sourceFileURL: props.sourceFileUrl,\r\n      goToSegmentation: false,\r\n    };\r\n\r\n    this.goToSegmentation = this.goToSegmentation.bind(this);\r\n  }\r\n\r\n  goToSegmentation() {\r\n    this.props.segmentatonReset()\r\n    this.setState({\r\n      goToSegmentation: true\r\n    })\r\n  }\r\n \r\n  render() {\r\n    const { sourceFileUrl }= this.props;\r\n    if (!this.props.sourceFileUrl) \r\n      return (<Redirect to='/ImgProcessing'/>)\r\n    else\r\n    return (\r\n      <div>\r\n        { (this.state.goToSegmentation) ?\r\n          <Redirect to='/ImgProcessing/Segmentation'/> : \r\n          true\r\n        }\r\n\r\n        <div className=\"row\">\r\n          <div className=\"col\">\r\n          { (this.props.imageProcessingStep===1) &&\r\n          <button onClick = { this.goToSegmentation }\r\n            className=\"btn btn-outline-info btn-sm btn-block\">\r\n              Segmentation &nbsp;\r\n            <i className=\"fa fa-flask\"/>\r\n          </button>\r\n          }\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"row mt-2\">\r\n          <div className=\"col\">\r\n            <img src={ sourceFileUrl } className=\"img-fluid rounded\" alt=\"\"/>\r\n          </div>\r\n        </div>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { backendServiceURL } from '../../../config/backendService';\r\nimport '../styles';\r\nexport default class ImageLastSegmentationPage extends Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n    this.state = {\r\n      \r\n    };\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.props.doGetLastSegmentatonImage();\r\n  }\r\n  \r\n  ProcessedImages = () => {\r\n    const images  = JSON.parse(window.localStorage.getItem('LastSegmentedFilesUrls'));\r\n    if ( Array.isArray(images) ){\r\n      return (\r\n        <div className='img-grid-line'>\r\n          {  \r\n          images.map(function(m, index) {\r\n              return (\r\n                <div className=\"row mr-auto mb-2\" key={ index }>\r\n                  <div className=\"col\">\r\n                    <img width=\"300\" src={ backendServiceURL + m.src_file_url.slice(1) } className=\"img-fluid rounded\" alt=\"\"/>\r\n                  </div>\r\n                  <div className=\"col ml-auto\">\r\n                    <img width=\"300\" src={ backendServiceURL + m.res_file_url.slice(1) } className=\"img-fluid rounded\" alt=\"\"/>\r\n                  </div>  \r\n                </div>);\r\n                }) \r\n          }\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"row\">\r\n          <div className=\"col\">\r\n          { (this.props.imageProcessingStep===1) &&\r\n          <button onClick = { this.goToSegmentation }\r\n            className=\"btn btn-outline-info btn-sm btn-block\">\r\n              Segmentation &nbsp;\r\n            <i className=\"fa  fa-flask\"/>\r\n          </button>\r\n          }\r\n          </div>\r\n        </div>\r\n          { this.ProcessedImages() }\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react'\r\n\r\nconst ImageProcessing = () => (\r\n  <div>\r\n    <p>–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</p>\r\n    –ò–∑–º–µ–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å\r\n  </div>\r\n)\r\nexport default ImageProcessing;","\r\nimport { apiCommandPOSTUploadSrcImg,\r\n  UPLOAD_SOURCE_IMAGE_REQUEST,\r\n  UPLOAD_SOURCE_IMAGE_SUCCESS,\r\n  UPLOAD_SOURCE_IMAGE_ERROR,\r\n} from '../constants/imageUploader';\r\n\r\nimport { validationJSON, dataURItoFile } from '../lib/utils'\r\nimport { backendServiceURL } from '../config/backendService';\r\n\r\nexport function requestUploadImage( filename ) {\r\n  return {\r\n    type: UPLOAD_SOURCE_IMAGE_REQUEST,\r\n    filename: filename,\r\n  }\r\n}\r\n\r\nexport function uploadImageRequestSuccess(filename) {\r\n  return {\r\n    type: UPLOAD_SOURCE_IMAGE_SUCCESS,\r\n    fileURL: filename,\r\n  }\r\n}\r\n\r\nexport function uploadImageRequestError(errorCode, errorMessage) {\r\n  return {\r\n    type: UPLOAD_SOURCE_IMAGE_ERROR,\r\n    error: {errorCode, errorMessage},\r\n  }\r\n}\r\n\r\nexport function doUploadImage(filename, dataUri, src) {\r\n    let data = new FormData();\r\n    data.append('file', src==='file'?dataUri:dataURItoFile(dataUri, filename));\r\n    filename = src==='file'?dataUri.name:filename\r\n\r\n    return function(dispatch) {\r\n    dispatch(requestUploadImage(filename));\r\n    let httpStatusCode = null;\r\n    let apiErrorCode = null;\r\n    let apiErrorMessage = null;\r\n \r\n    return fetch(apiCommandPOSTUploadSrcImg, {\r\n      // cors - The API service can be on any server, same-origin is The same server\r\n      // no-cors - No handle headers\r\n      mode: 'cors',\r\n      method: 'POST',\r\n      headers: {'Accept': 'application/json'},\r\n      body: data\r\n    })\r\n      .then((response)=>{\r\n        httpStatusCode = response.status;\r\n        return response;\r\n      })\r\n      .then(validationJSON) // Open promise\r\n      .then((data)=> {\r\n        if (httpStatusCode === 200) {\r\n          dispatch(uploadImageRequestSuccess(backendServiceURL + data.file_name.slice(1)));\r\n        }\r\n        else {\r\n          // data contains the error decryption in the error object\r\n          apiErrorCode = data.code;\r\n          apiErrorMessage = data.message;\r\n          const error = new Error()\r\n          throw error\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        if (process.env.NODE_ENV === 'development') console.log('doUploadImage() - Error: ', error);\r\n        dispatch(\r\n          uploadImageRequestError(\r\n            apiErrorCode || httpStatusCode,\r\n            apiErrorMessage || error.message\r\n          ));\r\n      })\r\n  }\r\n}","\r\nimport { SET_PROCESSING_STEP } from '../constants/imageProcessing';\r\n\r\nexport function setImageProcessingStep( processingStep ) {\r\n  return {\r\n    type: SET_PROCESSING_STEP,\r\n    processingStep: processingStep,\r\n  }\r\n}","import { connect } from 'react-redux';\r\nimport { ImageUploaderPage } from '../../components/ImageProcessing';\r\nimport { doUploadImage } from '../../actions/imageUploader';\r\nimport { setImageProcessingStep } from '../../actions/imageProcessing';\r\n\r\nconst mapStateToProps = (state) => ({\r\n    uploadSourceFileRequestError:state.imageUploader.uploadSourceFileRequestError,\r\n    uploadSourceFileRequestInProcess:state.imageUploader.uploadSourceFileRequestInProcess,\r\n    uploadSourceFileRequestStatus:state.imageUploader.uploadSourceFileRequestStatus,\r\n    uploadSourceFileRequestSuccess:state.imageUploader.uploadSourceFileRequestSuccess,\r\n    sourceFileUrl:state.imageUploader.serverSourceFileNameURL,\r\n    sourceFileName:state.imageUploader.uploadSourceFileName,\r\n\r\n    imageProcessingStep: state.imageProcessing.imageProcessingStep,\r\n  });\r\n\r\nconst mapDispathToProps = (dispath) => {\r\n    return {\r\n        doUploadImage: ( filename, dataUri, src ) => dispath( doUploadImage( filename, dataUri, src ) ),\r\n        setImageProcessingStep: ( processingStep ) => dispath( setImageProcessingStep( processingStep ) ),\r\n    };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispathToProps\r\n)(ImageUploaderPage)","import { connect } from 'react-redux';\r\nimport { ImageSegmentationPage} from '../../components/ImageProcessing';\r\nimport { doSegmentatonImage, segmentatonReset } from '../../actions/segmentationProcess';\r\nimport { setImageProcessingStep } from '../../actions/imageProcessing';\r\n\r\nconst mapStateToProps = (state) => ({\r\n  makeSegmentationRequestInProcess:state.imageSegmentations.makeSegmentationRequestInProcess,\r\n  makeSegmentationRequestError:state.imageSegmentations.makeSegmentationRequestError,\r\n  makeSegmentationRequestSuccess:state.imageSegmentations.makeSegmentationRequestSuccess,\r\n  makeSegmentationRequestStatus:state.imageSegmentations.makeSegmentationRequestStatus,\r\n\r\n  sourceFileUrl:state.imageUploader.serverSourceFileNameURL,\r\n  sourceFileName:state.imageUploader.uploadSourceFileName,\r\n\r\n  resultSegmentationFileUrl:state.imageSegmentations.resultSegmentationFileUrl,\r\n  resultSegmentationFileName:state.imageSegmentations.resultSegmentationFileName,\r\n\r\n  imageProcessingStep: state.imageProcessing.imageProcessingStep,\r\n  });\r\n\r\nconst mapDispathToProps = (dispath) => {\r\n    return {\r\n        doSegmentatonImage: ( filename ) => dispath( doSegmentatonImage( filename ) ),\r\n        setImageProcessingStep: ( processingStep ) => dispath( setImageProcessingStep( processingStep ) ),\r\n        segmentatonReset: () => dispath( segmentatonReset ())\r\n    };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispathToProps\r\n)(ImageSegmentationPage)\r\n","import { apiCommandGETMakeSegmentation,\r\n  MAKE_SEGMENTAQTION_REQUEST,\r\n  MAKE_SEGMENTAQTION_SUCCESS,\r\n  MAKE_SEGMENTAQTION_ERROR,\r\n  MAKE_SEGMENTAQTION_RESET\r\n} from '../constants/imageSegmentation';\r\nimport { validationJSON } from '../lib/utils'\r\n\r\nimport { backendServiceURL } from '../config/backendService';\r\n\r\n//Segmentaton\r\nexport function requestSegmentaton( filename ) {\r\n  return {\r\n    type: MAKE_SEGMENTAQTION_REQUEST,\r\n    sourceFileName: filename,\r\n  }\r\n}\r\n\r\nexport function segmentatonRequestSuccess(resFilename, resFileURL) {\r\n  return {\r\n    type: MAKE_SEGMENTAQTION_SUCCESS,\r\n    resultSegmentationFileName: resFilename,\r\n    resultSegmentationFileUrl: resFileURL,\r\n  }\r\n}\r\n\r\nexport function segmentatonRequestError(errorCode, errorMessage) {\r\n  return {\r\n    type: MAKE_SEGMENTAQTION_ERROR,\r\n    error: {errorCode, errorMessage},\r\n  }\r\n}\r\n \r\nexport function segmentatonReset() {\r\n  return {\r\n    type: MAKE_SEGMENTAQTION_RESET,\r\n  }\r\n}\r\n\r\nexport function doSegmentatonImage(filename) {\r\n  return function(dispatch) {\r\n    dispatch(requestSegmentaton(filename));\r\n    let httpStatusCode = null;\r\n    let apiErrorCode = null;\r\n    let apiErrorMessage = null;\r\n    return fetch(apiCommandGETMakeSegmentation + '/' + filename, {\r\n      // cors - The API service can be on any server, same-origin is The same server\r\n      // no-cors - No handle headers\r\n      mode: 'cors',\r\n      method: 'GET',\r\n      headers: {'Accept': 'application/json'},\r\n    })\r\n      .then((response)=>{\r\n        httpStatusCode = response.status;\r\n        return response;\r\n      })\r\n      .then(validationJSON) // Open promise\r\n      .then((data)=> {\r\n        if (httpStatusCode === 200) {\r\n          dispatch(segmentatonRequestSuccess(data.res_file_name, backendServiceURL + data.res_file_url.slice(1)));\r\n        }\r\n        else {\r\n          // data contains the error decryption in the error object\r\n          apiErrorCode = data.code;\r\n          apiErrorMessage = data.message;\r\n          const error = new Error()\r\n          throw error\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        if (process.env.NODE_ENV === 'development') console.log('doSegmentatonImage() - Error: ', error);\r\n        dispatch(\r\n          segmentatonRequestError(\r\n            apiErrorCode || httpStatusCode,\r\n            apiErrorMessage || error.message\r\n          ));\r\n      })\r\n  }\r\n}","import { connect } from 'react-redux';\r\nimport { ImagePreviewPage } from '../../components/ImageProcessing';\r\nimport { setImageProcessingStep } from '../../actions/imageProcessing';\r\nimport { segmentatonReset } from '../../actions/segmentationProcess';\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n  uploadSourceFileRequestError:state.imageUploader.uploadSourceFileRequestError,\r\n  uploadSourceFileRequestInProcess:state.imageUploader.uploadSourceFileRequestInProcess,\r\n  uploadSourceFileRequestStatus:state.imageUploader.uploadSourceFileRequestStatus,\r\n  uploadSourceFileRequestSuccess:state.imageUploader.uploadSourceFileRequestSuccess,\r\n  sourceFileUrl:state.imageUploader.serverSourceFileNameURL,\r\n  sourceFileName:state.imageUploader.uploadSourceFileName,\r\n  imageProcessingStep: state.imageProcessing.imageProcessingStep,\r\n  });\r\n\r\nconst mapDispathToProps = (dispath) => {\r\n    return {\r\n      setImageProcessingStep: ( processingStep ) => dispath( setImageProcessingStep( processingStep ) ),\r\n      segmentatonReset: () => dispath( segmentatonReset ())\r\n    };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispathToProps\r\n)(ImagePreviewPage)","import { apiCommandGETLastSegmentation,\r\n  GET_LAST_SEGMENTAQTION_REQUEST,\r\n  GET_LAST_SEGMENTAQTION_SUCCESS,\r\n  GET_LAST_SEGMENTAQTION_ERROR,\r\n} from '../constants/imageLastSegmentation';\r\nimport { validationJSON } from '../lib/utils'\r\n\r\n//Segmentaton\r\nexport function requestLastSegmentaton() {\r\n  return {\r\n    type: GET_LAST_SEGMENTAQTION_REQUEST,\r\n  }\r\n}\r\n\r\nexport function lastSegmentatonRequestSuccess(resFilesUrls) {\r\n  window.localStorage.setItem('LastSegmentedFilesUrls', JSON.stringify(resFilesUrls));\r\n  return {\r\n    type: GET_LAST_SEGMENTAQTION_SUCCESS,\r\n  }\r\n}\r\n\r\nexport function lastSegmentatonRequestError(errorCode, errorMessage) {\r\n  return {\r\n    type: GET_LAST_SEGMENTAQTION_ERROR,\r\n    error: {errorCode, errorMessage},\r\n  }\r\n}\r\n\r\nexport function doGetLastSegmentatonImage() {\r\n  return function(dispatch) {\r\n    dispatch(requestLastSegmentaton());\r\n    let httpStatusCode = null;\r\n    let apiErrorCode = null;\r\n    let apiErrorMessage = null;\r\n    return fetch(apiCommandGETLastSegmentation, {\r\n      // cors - The API service can be on any server, same-origin is The same server\r\n      // no-cors - No handle headers\r\n      mode: 'cors',\r\n      method: 'GET',\r\n      headers: {'Accept': 'application/json'},\r\n    })\r\n      .then((response)=>{\r\n        httpStatusCode = response.status;\r\n        return response;\r\n      })\r\n      .then(validationJSON) // Open promise\r\n      .then((data)=> {\r\n        // data contains the error decryption in the error object\r\n        if (httpStatusCode === 200) {\r\n          dispatch(lastSegmentatonRequestSuccess(data.segmented_files));\r\n        }\r\n        else {\r\n          // data contains the error decryption in the error object\r\n          apiErrorCode = data.code;\r\n          apiErrorMessage = data.message;\r\n          const error = new Error()\r\n          throw error\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        if (process.env.NODE_ENV === 'development') console.log('doSegmentatonImage() - Error: ', error);\r\n        dispatch(\r\n          lastSegmentatonRequestError(\r\n            apiErrorCode || httpStatusCode,\r\n            apiErrorMessage || error.message\r\n          ));\r\n      })\r\n  }\r\n}","import { connect } from 'react-redux';\r\nimport { ImageLastSegmentationPage} from '../../components/ImageProcessing';\r\nimport { doGetLastSegmentatonImage } from '../../actions/lastSegmentationProcess';\r\n \r\nconst mapStateToProps = (state) => ({\r\n  getLastSegmentationRequestInProcess:state.imageLastSegmentations.getLastSegmentationRequestInProcess,\r\n  getLastSegmentationRequestError:state.imageLastSegmentations.getLastSegmentationRequestError,\r\n  getLastSegmentationRequestSuccess:state.imageLastSegmentations.getLastSegmentationRequestSuccess,\r\n  getLastSegmentationRequestStatus:state.imageLastSegmentations.getLastSegmentationRequestStatus,\r\n  \r\n  resultLastSegmentationFilesURLs:state.imageLastSegmentations.resultLastSegmentationFilesURLs,  \r\n  });\r\n\r\nconst mapDispathToProps = (dispath) => {\r\n    return {\r\n      doGetLastSegmentatonImage: () => dispath( doGetLastSegmentatonImage() ),\r\n    };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispathToProps\r\n)(ImageLastSegmentationPage)","\r\n// Component for redirection\r\nimport { RedirectTo } from '../../containers/RedirectTo';\r\n// Main visual modules\r\n \r\nimport  ImageProcessingNotFoundView   from '../../components/ImageProcessing/ImageProcessingNotFoundView'\r\n\r\n// Contents of the main module window\r\nimport ConnectedImageUploading from '../../containers/ImageProcessing/ConnectedImageUploading';\r\nimport ConnectedImageSegmentation from '../../containers/ImageProcessing/ConnectedImageSegmentation';\r\nimport ConnectedImagePreview from '../../containers/ImageProcessing/ConnectedImagePreview';\r\nimport ConnectedImageLastSegmentation from '../../containers/ImageProcessing/ConnectedImageLastSegmentation';\r\n\r\n// Contents of the module's filter window\r\n\r\n// Internal information pages of the module\r\n\r\n// The main router of the module\r\nconst ModuleRootPath = '/ImgProcessing';\r\n\r\n// Settings for the Receivables module\r\nconst ImageProcessingModules = [\r\n  {\r\n    caption: 'Get image',\r\n    exact: false,\r\n    link: ModuleRootPath + '/Upload',\r\n    path: ModuleRootPath + '/Upload',\r\n    component: ConnectedImageUploading,\r\n    filter–°omponent: ()=>(null),\r\n  },\r\n\r\n  {\r\n    caption: 'Preview',\r\n    exact: false,\r\n    link: ModuleRootPath + '/Preview',\r\n    path: ModuleRootPath + '/Preview',\r\n    component: ConnectedImagePreview,\r\n    filter–°omponent: ()=>(null),\r\n  },\r\n\r\n  {\r\n    caption: 'Segmentation',\r\n    exact: false,\r\n    link: ModuleRootPath + '/Segmentation',\r\n    path: ModuleRootPath + '/Segmentation',\r\n    component: ConnectedImageSegmentation,\r\n    filter–°omponent: ()=>(null),\r\n  },  \r\n \r\n  {\r\n    caption: 'Last segmentations',\r\n    exact: false,\r\n    link: ModuleRootPath + '/LastSegmentation',\r\n    path: ModuleRootPath + '/LastSegmentation',\r\n    component: ConnectedImageLastSegmentation,\r\n    filter–°omponent: ()=>(null),\r\n  },  \r\n\r\n  { // Index page of the ImageProcessing module\r\n    exact: false,\r\n    path: ModuleRootPath + '/',\r\n    component: ()=>RedirectTo(ModuleRootPath + '/Upload'),  \r\n    filter–°omponent: ()=>(null),\r\n  },\r\n\r\n  { // Message \"Object not found\" - output to the main window of the module\r\n    exact: false,\r\n    component: ImageProcessingNotFoundView,\r\n    filter–°omponent: ()=>(null),\r\n  },\r\n];\r\n\r\nexport default ImageProcessingModules;","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nexport const RedirectTo = (newPath)=> <Redirect to={ newPath }/>;","import React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\n \r\n// The module settings\r\nimport ImageProcessingModules from '../../routes/ImageProcessing/ImageProcessingIndex';\r\n// Module menu bar\r\nimport { MenuLine as Menu} from '../../components';\r\n\r\nexport const ImageProcessingMenu = () => (\r\n  <Menu items={ ImageProcessingModules } />\r\n)\r\n\r\nexport const ImageProcessingRoutes = () => (\r\n  // <Switch> - because non-existing routes can be called inside Receivables\r\n  <Switch>\r\n    {ImageProcessingModules.map(\r\n      (props, i)=>(\r\n        <Route key={ i } { ...props }/>\r\n      )\r\n    )}\r\n  </Switch>\r\n)\r\n\r\nexport const ImageProcessingFilter = () => (\r\n    ImageProcessingModules.map(\r\n    (props, i)=>(\r\n      <Route key={ i } { ...props } component = { props.filter–°omponent }/>\r\n    )\r\n  )\r\n)","import React, { Component } from 'react';\r\n/**\r\n * Each module has three main components\r\n * Routes - module internal routing\r\n * Menu - menu\r\n * Filter - filters\r\n */\r\nimport { ImageProcessingRoutes, ImageProcessingMenu, ImageProcessingFilter }\r\n  from '../../containers/ImageProcessing';\r\n\r\nexport default class ImageProcessingView extends Component {\r\n  static propTypes = {\r\n    \r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"container-fluid\">\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col-xl-1 col-lg-0 module-menu-line-color border-bottom\"></div>\r\n          <div className=\"col module-menu-line-color border-bottom\">\r\n            {/* Main menu of the module */}\r\n            <ImageProcessingMenu/>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"row\">\r\n          <div className=\"col-xl-3 col-lg-0\">\r\n            {/* Module filter window (on the left) */}\r\n            <ImageProcessingFilter/>\r\n          </div>\r\n          <div className=\"col-xl-7 col-md\">\r\n            {/* Main window of the module */}\r\n            <ImageProcessingRoutes/>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { FooterView, LogoView, MainViewHelpView,MainAboutView,\r\n  NavMainMenuCollapsable } from '..';\r\nimport './styles';\r\nimport { Route } from 'react-router-dom';\r\n\r\n// Main page\r\nimport { MainViewIndexView } from './MainViewIndexView';\r\n\r\n\r\n// Modules\r\n// Image processing module\r\nimport { ImageProcessingView } from '../../ImageProcessing'\r\n\r\nclass DesktopMainView extends Component {\r\n  static propTypes = {\r\n    systemVersion: PropTypes.string.isRequired,\r\n    systemName: PropTypes.string.isRequired,\r\n    newAppVersionAvailable: PropTypes.bool,\r\n  }\r\n\r\n  static menuItems = [];\r\n  static authMenuItems = [];\r\n\r\n  constructor(props, context) {\r\n    super(props, context);\r\n    this.state = {\r\n      collapsedMainMenu: true,\r\n      previousLocation: '/',\r\n    }\r\n\r\n    this.menuItems = [\r\n      { caption: 'About', link: '/About' },\r\n      { caption: 'Image segmentation', link: '/ImgProcessing' },\r\n      { caption: 'Used model', link: '/Help', attention: false },\r\n    ];\r\n  }\r\n\r\n  // Save the previous route\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    if (nextProps.location.pathname !== prevState.previousLocation) {\r\n      window.previousLocation = prevState.previousLocation;\r\n      return {\r\n        previousLocation: nextProps.location.pathname\r\n      };\r\n    }\r\n    // If there are no changes\r\n    return null;\r\n  }\r\n  \r\n  onToggleCollapse(){\r\n    this.setState({\r\n      collapsedMainMenu : !this.state.collapsedMainMenu\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"zApp\">\r\n        <header className=\"border-bottom\">\r\n          <NavMainMenuCollapsable LogoView={LogoView} leftItems={this.menuItems} rightItems={this.authMenuItems} \r\n          collapsed={ this.state.collapsedMainMenu }\r\n          onToggleCollapse = { ()=>this.onToggleCollapse() }\r\n          />\r\n        </header>\r\n\r\n        <main className=\"app-modules\" >\r\n          {/*If no module is selected output MainViewIndexView*/}\r\n          <Route exact path=\"/\" component={ ()=>MainViewIndexView(this.props.authorized) } />\r\n          <Route exact path=\"/index.html\" component={ ()=>MainViewIndexView(this.props.authorized) } />\r\n          {/*List of functional modules*/}\r\n          {\r\n          <div>\r\n            <Route exact path=\"/Help\" component={ MainViewHelpView } />\r\n            <Route exact path=\"/About\" component={ ()=>MainAboutView(this.props.systemVersion) } />\r\n            <Route path=\"/ImgProcessing\" component={ ImageProcessingView } />\r\n          </div>\r\n          }\r\n        </main>\r\n        <FooterView/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DesktopMainView;","import React from 'react';\r\n \r\nexport const MainAboutView = (systemVersion) => (\r\n  <div className=\"container-fluid\">\r\n    <br/>\r\n    <div className=\"row\">\r\n      <div className=\"col align-items-center\">\r\n        {/* Additional menu of the main page */}\r\n      </div>\r\n    </div>\r\n    <div className=\"row\">\r\n      <div className=\"col-xl-3 col-lg-0\">\r\n        {/* Additional main page window */}\r\n      </div>\r\n      <div className=\"col-xl-7 col-md\">\r\n        {/* Main window of the main page */}\r\n        <div className=\"row\">\r\n          <div className=\"col-xl-10 col-md\">\r\n            <h5>Demo application course project</h5>\r\n            <div className=\"alert alert-info zalert-info-card\" role=\"alert\">\r\n              <p>Neural Image Segmentation Demo</p>\r\n              <hr/>\r\n              <p>Segmentation pictures of camera images and jpg files</p>\r\n              <p>for &nbsp;              \r\n                <a title=\"Deep Learning Scool\" \r\n                 href=\"https://www.dlschool.org/\"\r\n                 className=\"internal-page-link-calm\">\r\n                 Deep Learning Scool\r\n                </a>\r\n              </p>              \r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n)","import React from 'react';\r\nimport NavMenuLine from '../NavMenuLine/NavMenuLine';\r\nimport PropTypes from 'prop-types';\r\nexport const NavModuleMenu = ({ items, RightSide }) => {\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <div className=\"row no-gutters module-menu-line-color\">\r\n        <div className=\"col-auto mr-auto navbar-expand-sm\">\r\n          <NavMenuLine items={ items }/>\r\n        </div>\r\n        { RightSide &&\r\n          <div className=\"col ml-auto\">\r\n            <RightSide/>\r\n          </div>\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nNavModuleMenu.propTypes = {\r\n  items: PropTypes.array,\r\n  RightSide: PropTypes.func,\r\n}","import { connect } from 'react-redux';\r\nimport { DesktopMainView as MainView} from '../components';\r\nimport { systemVersion, systemName } from '../config/systemConfig'\r\n\r\nconst mapStateToProps = (state) => ({\r\n  systemName: systemName,\r\n  systemVersion: systemVersion,\r\n});\r\n\r\n// Authorization is not required for this demo\r\nconst mapDispathToProps = (dispath) => {\r\n  return {\r\n   // doLogout: () => dispath(autorizationLogout()),\r\n   // doCloseUpdateAppMessage: () => dispath(—ÅloseUpdateAppMessage()),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispathToProps\r\n)(MainView)\r\n","import React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\n\r\n// Containers\r\nimport { App } from '../containers';\r\n\r\n// Main visual modules\r\nimport { NotFoundView } from '../components';\r\n\r\nexport default(\r\n  <div>\r\n    <Switch>\r\n      <Route exact path=\"/index.html\" component={ App }/>\r\n      <Route exact path=\"/\" component={ App }/>\r\n      <Route path=\"/About\" component={ App }/>\r\n      <Route path=\"/ImgProcessing\" component={ App } />\r\n      <Route path=\"/Help\" component={ App } />\r\n      <Route component={ NotFoundView }/>\r\n    </Switch>\r\n  </div>\r\n)","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { LogoView, FooterView } from '..';\r\n\r\nexport const NotFoundView = ({ location }) => (\r\n  <div className=\"zApp\">\r\n    <div className=\"container app-modules\">\r\n      <div className=\"row\">\r\n        <div className=\"col-lg-3 col-md-0\">\r\n          <LogoView/>\r\n        </div>\r\n        <div className=\"col-lg-6 col-md mt-2\">\r\n          <h4>Page not found</h4>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"row\">\r\n        <div className=\"col\">\r\n          <div className=\"d-md-none\">\r\n            <hr/>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"row\">\r\n        <div className=\"col-lg-3 col-md-0\"></div>\r\n        <div className=\"col-lg-6 col-md-0 mb-2\">\r\n          <p>{ location.pathname }</p>\r\n          <hr/>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"row\">\r\n        <div className=\"col-lg-3 col-md-0\"></div>\r\n        <div className=\"col-lg-6 col-md-0 mb-2\">\r\n          <div className=\"row no-gutters\">\r\n            <div className=\"col-md-6 col-sm ml-auto\">\r\n              <Link to={ '/' } className=\"internal-page-link-calm-nu\" title=\"Main page\">\r\n                <button type=\"submit\" className=\"btn btn-outline-info btn-sm btn-block\">\r\n                  OK\r\n                </button>\r\n              </Link>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n \r\n    </div>\r\n    <FooterView/>\r\n  </div>\r\n)","import { Provider } from 'react-redux'\r\nimport React, { Component } from 'react';\r\nimport routes from '../routes';\r\nimport { BrowserRouter as Router} from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class Root extends Component {\r\n  static propTypes = {\r\n    store: PropTypes.object.isRequired\r\n  };\r\n \r\n  render() {\r\n    return (\r\n      <div>\r\n        <Provider store={this.props.store}>\r\n          <div>\r\n            <Router>\r\n              { routes }\r\n            </Router>\r\n          </div>\r\n        </Provider>\r\n      </div>\r\n    );\r\n  }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport configureStore from './config/configureStore';\r\nimport Root from './containers/Root';\r\nimport * as serviceWorker from './extensions/serviceWorker/serviceWorker';\r\n\r\nconst store = configureStore();\r\nif (process.env.NODE_ENV === 'development') store.subscribe(()=>console.log('The container changed', store.getState()));\r\n    \r\nReactDOM.render(\r\n    <Root store={ store }/>,\r\n    document.getElementById('root'));  \r\n\r\nserviceWorker.unregister();","import { createStore, applyMiddleware } from 'redux';\r\nimport rootReducer from '../reducers';\r\nimport thunk from 'redux-thunk';\r\n\r\nexport default function confugureStore(initialState) {\r\n  return createStore(\r\n    rootReducer,\r\n    initialState,\r\n    applyMiddleware(thunk));\r\n}"],"sourceRoot":""}